并发编程基础篇

我们为什么要去学习并发编程
	第一点：面试非常重要，企业面试程序员标准，考察因素
		1：考察公司技术你是否熟悉50%以上，或者公司有特殊的技术需求，正好你熟悉。
		2：人品问题
		3：知识面，潜力
	第二点：对自己技术提升很有帮助
		并发编程学到手，有了知识面扩展，眼界宽了
	第三点：
		学习好了并发编程，在以后的分布式系统中，你都可以找到类似
		并发、分布式、并行处理问题的概念
		
我们如何学习并发编程？
	很多人可能只知道多线程中synchronized、volatile、ReentrantLock、concurrent下数据包等等
	这些看似高深的代名词，但不等于会用。。。。
	滥用会闹笑话，上不了大席。。
	我们要掌握基本概念，入门。
	然后刨析本质，结合业务逻辑应用


	
线程安全基础知识、synchronized、volatile关键字的场景使用
线程之间通信 wait、notify、ThreadLocal、单例和多线程


线程安全：
	线程安全概念：
		当多个线程访问某一个类（对象或者方法）时，这个类始终都能表现出正确的行为，
		那么这个类（对象或者方法）就是线程安全的。
		
	synchronized：
		可以在任意对象及方法上加锁，而加锁的这段代码成为 互斥区 或者 临界区
		
	示例：
		com.wty.base.sync001 -> MyThread
		
	示例总结：
		当多个线程访问myThread的run方法时，以排队的方式进行处理（CPU分配的先后顺序），
		一个线程想要执行synchronized修饰的方法里的代码，首先尝试获取锁，如果拿到锁，
		执行synchronized 代码内容，拿不到锁，这个线程就会不断的尝试获得这把锁，直到
		拿到位置，而且是多个线程同时去竞争这把锁（锁竞争问题）
		

多个线程多个锁：
	多个线程，每个线程都能拿到自己指定的锁，分别获得锁之后，执行synchronized方法体的内容
	
	示例：com.wty.sync002 -> MultiThread
	
	示例总结：
		关键字synchronized取得的锁都是对象锁，而不是把一段代码（方法）当作锁，
		所以示例代码中哪个线程限制性synchronized关键字的方法，哪个线程就持有该
		方法所属对象的锁（lock），两个对象，线程获得的就是两个不同的锁，他们互不
		影响。
			有一种情况则是相同的锁，在静态方法上加synchronized关键字，标识锁定.class类
			类一级别的锁独占.class类
			
		synchronized与static synchronized的区别？
			synchronized锁的是实例对象，若实例被锁，则该实例的所有同步方法全部被锁
			static synchronized锁的是类对象，若类被锁，则该类的所有同步方法全部被锁
		


对象锁的同步和异步：
	同步：
		synchronized
		同步的概念就是共享，我们要牢牢记住共享这两个字，如果资源不是共享的资源，
		就没必要进行同步
	异步：
		asynchronized
		异步的概念就是独立，相互之间不会收到任何制约。类似http在页面发起的Ajax，
		我们还可以继续浏览或操作页面的内容，二者之间没有任何关系。
		
	同步的不敌就是为了线程安全，对于线程安全来说，需要满足两个特性：
		原子性（同步）
		可见性
		
	示例com.wty.base.sync003 -> MyObject
	
	示例总结：
		A线程先持有Object对象的Lock锁，B线程如果在这个时候调用对象中的同步（synchronized）
		方法，则需要等待，也就是同步
		
		A线程先持有Object多项的Lock锁，B线程可以异步的调用对象中非synchronized修饰的方法
				
				
				
脏读：
	对于对象的的同步和异步方法，我们在设计自己的程序时，一定要考虑问题的整体，不然就会出现
	数据不一致的错误，很经典的错误 ---- 脏读（dirtyread）
	
	示例：
		com.wty.base.sync004 -> DirtyRead
		
	示例总结：
		我们在对一个对象的方法加锁的时候，需要考虑业务的整体性：
			setValue() / getValue()
			方法同时加锁 synchronized 同步关键字，保证业务（Service）的原子性
			不然会出现业务错误（从侧面保证业务的一致性）




synchronized锁重入：
	关键字synchronized拥有锁冲入的功能：
		也就是在使用synchronized时，当一个线程的到了一个对象的锁后，再次请求此对象时，是否可以再次获得到该对象的锁。
	
	示例：
		com.wty.base.sync05 - SyncDubbo1 SyncDubbo2
		
	出现异常，锁自动释放
	
	示例：
		com.wty.base.sync005 -> SyncException
		
	说明：
		对于web应用程序，异常释放锁的情况，如果不及时处理，很可能对你的应用程序业务逻辑产生严重的错误，
		比如你现在执行一个队列任务，很多对象都去在等待第一个对象正确执行完毕再去释放锁，但是第一个对象
		由于异常的出现，导致业务逻辑没有正常执行完毕，就释放了锁，那么可想而知后续的对象执行的全都是错
		误的逻辑。所以至一点一定要引起注意，考虑周全。
		
		


synchronized代码块
	使用synchronized声明的方法在某些情况下是有弊端的，比如A线程调用同步的方法执行
	一个很长的任务，那么B线程就必须等待比较长的时间才能执行，这样的情况下可以使用
	synchronized代码块去优化代码执行时间，也就是通常所说的减小锁的粒度
	
	示例：
		com.wty.base.sync006 -> ObjectLock
	
	另外特别要注意一个问题，就是不要使用String的常量加锁，会出现死循环问题。
	
	示例：
		com.wty.base.sync006.StringLock
		
		
		
锁对象的改变问题：
	当使用一个对象进行加锁的时候，要注意对象本身发生改变的时候，
	那么持有的锁就不同。如果对象本身不发生改变，那么依然是同步
	的，即使对象的属性发生了改变

示例：
	com.wty.base.sync006 -> ChangeLock ModifyLock
		
		
		
		
死锁问题：
	com.wty.base.sync006 -> DeadLock
	
	

volatile关键字概念
	
	volatile概念：
		volatile关键字的主要作用是使变量在多个线程间可见。
		
	示例：
		com.wty.base.sync07 RunThread
		
	示例总结：
		在java中，每一个线程都会有一块工作内存区，其中存放着所有线程共享的主内存中的变量的拷贝。
		当线程执行时，他在自己的工作内存中操作这些变量。为了存取一个共享的变量，一个线程通常先获
		取锁定病区清理它的内存工作区，把这些共享的变量从所有线程的共享内存区中正确的装入到他自己
		所在的工作内存中，当线程解锁时，保证该工作内存区中的变量的值写回到共享内存中。
		
		一个线程可以执行的操作有，使用（use）、复制（assign）、装载（load）、存储（store）、
		锁定（lock）、解锁（unlock），每个操作都是原子的。
		
		volatile的作用就是强制前程到主内存（共享内存）里去读取变量，而不是去线程工作内存区里去
		读取，从而实现了多个线程间的变量可见。也就是满足线程安全的可见性。
		
		
		主内存 private boolean isOk = true;
		
		线程工作内存 -> read，load 主内存 -> private boolean isOk = true;
		-> 赋值 线程执行引擎  -> 使用 use isOk -> store，write -> 主内存
		
		如果 isOk 写成 volatile修饰的变量
			private volatile boolean isOk = true;
			表示，强制线程执行引擎去读取主内存里面的isOk
			当 isOk 发生变化，线程工作内存会重新读取（copy）主内存。
		

volatile关键字的非原子性
		
		volatile关键字虽然拥有多个线程之间的可见性，但是却不具备同步性（也就是原子性），
		可以算上是一个轻量级的synchronized，性能要比synchronized强很多，不会造成阻塞
		（在很多开源的架构里，比如netty的底层代码就大量使用了volatile），可见netty性能一定
		是非常不错的。
		
		示例：
			com.wty.base.sync07.VolatileNoAtomic
		
		注意：
			volatile用于只针对于多个线程可见的变量操作，并不能代替synchronized的同步功能。
			
		示例总结：
			volatile关键字只具备可见性，没有原子性。要实现原子性建议使用Atomic类的系列对象，
			支持原子性操作（Atomic类只保证本身方法的原子性，并不能保证多次操作的原子性）
			
		示例：
			com.wty.base.sync07 AtomicUse
			
			




线程之间通信：
	线程通信概念：
		线程使操作系统中独立的个体，但这些个体如果不经过特殊的处理就不能成为一个整体，
		线程间的通信就成为整体的必用方式之一。当线程存在通讯指挥，系统间的交互性会更强
		大，在提高CPU利用率的同时还会使开发人员对线程任务在处理的过程中进行有效的把控和
		监督。
		
		使用 wait() / notify() 方法实现线程间的通讯。
			注意这两个方法都是Object类的方法，换句话说，java为所有的对象都提供了这两个方法
		1：wait() 和 notify() 必须配合synchronized 关键字使用
		2：wait() 方法释放锁，notify() 方法不释放锁。
		
		示例：
			com.wty.base.conn08 ListAdd1
			com.wty.base.conn08 ListAdd2
		
		
		
		
使用wait()/notify() 模拟Queue
	BlockingQueue：
		队列，支持阻塞的机制，阻塞的放入和得到数据。我们要实现LinkedBlockingQueue下面两个简单方法，
		put() 和 tack()。
		
	put(anObject)：
		把anObject加到BlockingQueue里，如果BlockQueue没有空间，则调用此方法的线程被阻断，直到BlockingQueue
		里面有空间再继续。
		
	tack：
		取走BlockingQueue里排在首位的对象，若BlockingQueue为空，阻断进入等待状态，知道BlockingQueue有的新数据
		被加入
		
	示例：
		com.wty.base.conn09 -> MyQueue
		
		
		
		
ThreadLocal：
	ThreadLocal概念：
		线程局部变量，是一种多线程间并发访问变量的解决方案。与其synchronized等加锁的方式不同，
		ThreadLocal完全不提供锁，而是用空间换时间的手段，为每个线程提供变量的独立副本，以保障
		线程安全。
		
		从性能上说，ThreadLocal不具有绝对的优势，在并发不是很高的时候，加锁的性能会更好，但作为
		一套与锁完全无关的线程安全解决方案，在高并发量或者竞争激烈的场景，使用ThreadLocal可以在
		一定程度上减少锁竞争。
		
		



单例和多线程：
	最常见的就是饥饿模式和懒汉模式，一个直接实例化对象，一个在调用方法的时候实例化对象。
	在多线程模式中，考虑到性能和线程安全问题，我们一般选用 dubble check instance 或者 
	static inner class 这两种单例模式。
	