并发编程高级篇

JDK多线程任务执行框架
Concurrent.util工具类详细讲解和使用
重入锁、读写锁使用 -> 锁的高级深化

disruptor


Executot框架：

	为了更好的控制多线程，JDK提供了一套线程框架Executor，帮助开发人员有效的进行线程控制。
	他们都在java.util.concurrent包中，是JDK并发包的核心。其中有一个比较重要的类：Executors，
	他扮演了线程工厂的角色，我们通过Executors可以创建特定功能的线程池。
	
	Executors创建线程池的方法：
		
		newFixedThreadPool方法：
			该方法返回一个固定数量线程的线程池，该方法的线程数始终不变，当有一个任务提交时，若线程池中
			空闲，则立即执行，若没有，则会被暂存在一个任务队列中等待有空闲的额线程去执行。
			
		newSingleThreadExecutor方法：
			创建一个线程的线程池，若空闲则执行，若没有空闲线程则缓存在任务队列中。
			
		newCachedThreadPool方法：
			返回一个可根据实际情况调整线程个数的线程池，不限制最大线程数量，若有任务，则创建线程，
			若无任务，则不创建线程池。如果没有任务则线程在60s后自动回收（空闲实现60s）。
			
		newScheduledThreadPool方法：
			该方法返回一个SchededExecutorService对象，但该线程池可以指定线程的数量。
			

自定义线程池：
	若Executors工厂类无法满足我们的需求，我们可以自己去定义线程池，其实Executors工厂类里面的创建
	线程方法其内部实现均是用了ThreadPoolExecutor这个类，这个类可以自定义线程。
	构造方法：
		public ThreadPoolExecutor(int corePoolSize,
                              int maximumPoolSize,
                              long keepAliveTime,
                              TimeUnit unit,
                              BlockingQueue<Runnable> workQueue,
                              ThreadFactory threadFactory,
                              RejectedExecutionHandler handler) {
		}
		
		



自定义线程池详细说明：
	
	上面说到的构造方法，对于队列是什么类型的比较关键：
		
		在使用有界队列时：
			
			若有新的任务需要执行，如果线程池实际线程数小于 corePoolSize，
			则优先创建线程，若大于corePoolSize，则会将任务加入队列，若队列已满，则在总线程
			数不大于maximumPoolSize的前提下，创建新的线程，若线程数大于maximumPoolSize，则
			执行拒绝策略，或其他自定义方式。
		
		
		
		在使用无界的任务队列时：
			
			LinkedBlockingQueue。
				与有界队列相比，除非系统资源耗尽，否则无界的任务队列不存在任务入队失败的情况。
				当有新任务到来，系统的线程数小于corePoolSize时，则新建线程执行任务。当达到corePoolSize
				后，就不会继续增加。若后续仍有新的任务加入，而又没有空闲的线程资源，则任务直接进入队列
				等待。若后续创建和处理的速度差异很大，无界队列会保持快速增长，直到耗尽系统内存。
				
		
		
		JDK拒绝策略：
			
			AbortPolicy：直接抛出异常，阻止系统正常工作。
			CallerRunsPolicy：只要线程池未关闭，该策略直接在调用者线程中，运行当前被丢弃的任务。
			DiscardOldestPolicy：丢弃最老的一个请求，尝试再次提交当前任务。
			DiscardPolicy：丢弃无法处理的任务，不给予任何处理。		
		如果需要自定义拒绝策略，可以实现RejectedExecutionHandler接口。
		
		