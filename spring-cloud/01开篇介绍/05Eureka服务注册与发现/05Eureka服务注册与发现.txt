1:服务注册与发现
	1:Eureka
	2:Zookeeper
	3:Consul
	4:Nocas
	
2：服务调用
	1:Ribbon
	2:LoadBalance
	
3：服务调用2
	1：Feign
	2：OpenFeign
	
4：服务降级：
	1：Hystrix
	2：Sentinel
	
5：服务网关：
	1：Zuul
	2：Zuul2
	3：gateway
	
6：服务配置
	1：Config
	2：Nacos
	
7：服务总线
	1：Bus
	2：Nacos
	
	
	
	
	
	
1：服务注册与发现

	面试题：
		1：Eureka已经不维护了，那么有哪些可以代替Eureka的？
		2：Zookeeper和Consul、Nacos的区别是什么？
	
	
	1：Eureka基础知识：
	
		1：什么是服务治理？
			Spring Cloud 封装了NetFlix 公司开发的 Eureka 模块来实现服务治理
			
			在传统的RPC远程调用框架中，管理每个服务与服务之间的依赖关系比较复杂，管理比较复杂，
			所以需要使用服务治理，管理服务与服务之间的依赖关系，可以实现服务调用、负载均衡、
			容错等，实现服务发现与注册。
	
		2：什么是服务注册与发现？
			Eureka采用了CS的设计架构，Eureka Server作为服务注册功能的服务器，他是服务注册中心。
			而系统中的其他微服务，使用Eureka的客户端连接到Eureka Server并维持心跳连接。这样系统
			的维护人员就可以通过Eureka Server 来监控系统中各个服务是否正常运行。
			
			在服务注册与发现中，有一个注册中心。当服务启动的时候，会把当前自己服务器的信息，比如
			服务地址通讯地址等以别名方式注册到注册中心上。另一方（消费者 | 服务提供者），以该别名
			的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地RPC调用RPC远程调用框架核心
			设计思想：在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系（服务治理概念）。
			再任何ROC远程框架中，都会有一个注册中心（存放服务地址相关信息 -- 接口地址）
		
			1：Eureka 和 Dubbo的区别
				见图片 05_01Eureka和Dubbo的区别.png
		
		
		
		3：Eureka的两个组件 Eureka Server 和 Eureka Client
		
			1：Eureka Server 提供服务注册服务
				各个微服务节点通过配置启动后，会在EurekaServer中进行注册，这样Eureka Server中
				的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看
				到。
				
			2：Eureka Clinet 通过注册中心进行访问
				是一个Java客户端，用于简化 Eureka Server 的交互，客户端同时也具备一个内置的、
				使用轮询（round-robin）负载算法的负载均衡器。在应用启动后，会向Eureka Server
				发送心跳（默认周期30秒），如果Eureka Server在多个心跳周期内没有接收到某个节点
				的心跳，Eureka Server 将会从服务注册表中把这个服务节点移除（默认90秒）
			
	
	2：单机Eureka构建步骤 Eureka Server端口 -- 7001
		1：Idea生成Eureka Server端服务注册中心，类似物业公司
			1：建Modul  cloud-eureka-server-7001
			2：改POM
				1：boot 1.x 和 boot 2.x Eureka的区别 
					1.x： 2018年吧。
						<dependency>
							<groupId>org.springframework.cloud</groupId>
							<artifactId>spring-cloud-starter-eureka</artifactId>
						</dependency>
						
					2.x：2020年2
						<dependency>
							<groupId>org.springframework.cloud</groupId>
							<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
						</dependency>
			3：写yml
			4：主启动类 别忘了 @EnableEurekaServer
			5：测试.........localhost:7001
			
			
		
		
		2：Eureka Client端 cloud-provider-payment-8001
			将注册进Eureka Server成为服务提供者 provider，类似于小卖部开张
			
			1:cloud-provider-payment-8001
				1:改POM
				2:写yml
					1：boot 1.x 和 boot 2.x Eureka的区别 
						1.x： 2018年吧。
							<dependency>
								<groupId>org.springframework.cloud</groupId>
								<artifactId>spring-cloud-starter-eureka</artifactId>
							</dependency>
							
						2.x：2020年2
							<dependency>
								<groupId>org.springframework.cloud</groupId>
								<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
							</dependency>
				3:主启动类 --- @EnableEurekaClient
				4：测试...
					1:启动EurekaServer 7001
					2:http://localhost:7001
					3:微服务注册名配置说明
				5:自我保护机制~
			
		3：EurekaClient端 cloud-consumer-order-80
			将注册进Eureka Server成为服务消费者consumer，类似于去小卖部。。买辣条
			
			1:cloud-consumer-order-80
				1:改POM
				2:写yml
					1：boot 1.x 和 boot 2.x Eureka的区别 
						1.x： 2018年吧。
							<dependency>
								<groupId>org.springframework.cloud</groupId>
								<artifactId>spring-cloud-starter-eureka</artifactId>
							</dependency>
							
						2.x：2020年2
							<dependency>
								<groupId>org.springframework.cloud</groupId>
								<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
							</dependency>
				3:主启动类 --- @EnableEurekaClient
				4：测试...
					1:启动EurekaServer 7001
					2:http://localhost:7001
					3:微服务注册名配置说明
				5:自我保护机制~
			
			
		4：BUG
			1：yml格式一定。。。注意
	
	
	
	3：集群Eureka构建步骤（图：05_02Eureka集群原理说明.png）
		
		1：Eureka集群原理说明
			服务注册：将服务信息注册进注册中心
			服务发现：从注册中心上获取服务信息
			实质：存key服务名 取value调用地址
			
			问题：微服务RPC远程服务调用最核心的是什么？
				高可用，注册中心只有一个，出了问题就死没了
			
			解决办法：
				搭建Eureka注册中心集群，实现负载均衡+故障容错
				
			集群注册原理：
				相互注册，互相守望
				A -> B -> C
				B -> C -> A
				C -> A -> B
			
		2：EurekaServer集群环境构建步骤
			
			1：cloud-eureka-server-7002
			2：pom和7001保持一致
			3：修改配置 hosts文件。
				eureka7001.com
				eureka7002.com
			4：yml配置（和单机有所不同了）
			5：配置主启动类
		
		3：将 cloud-provider-payment-8001 微服务发布到2台Eureka集群配置中
			1：yml文件，修改eureka.client.service-url.defaultZone=http://eureka7001.com:7001,http://eureka7002.com:7002
		
		4：将 cloud-consumer-order-80 微服务发布到2台Eureka集群配置中
			1:yml文件，修改 defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/
		
		5：第一次测试
			
			1：先启动EurekaServer , 7001/7002服务
			2：启动服务提供者 8001
			3：启动服务消费者 80
			4：http://127.0.0.1/consumer/payment/get/1
			
			到这里：集群搭建，服务注册已经完毕了。
			
		6：支付服务提供者8001集群环境构建
		
			1：参考 cloud-provider-payment-8001 
			2：新建 cloud-provider-payment-8002
			3：改pom
			4：写YML
			5：主启动
			6：业务类
			7：修改8001/8002的Controller
		
		7：负载均衡
		
			1：使用@LoadBalanced注解，让RestTemplate拥有负载均衡的能力 -> 80 ->  public static final String PAYMENT_URL = "http://CLOUD-PAYMENT-SERVICE";
			2：ApplicationContextBean -> Ribbon的负载均衡功能
			
			Ribbon和Eureka整合之后，Consumer 可以直接调用服务，不用去关心地址和端口号，且该服务还有负载均衡的功能了
		
		8：第二次测试
	
	4：actuator微服务信息完善
	
	5：服务发现 Discovery
	
	6：eureka自我保护
	
